name: "(Tag): Prepare"

permissions:
  contents: write
  pull-requests: write
  actions: read

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to create the tag for (e.g. 3.6.9) or `next`'
        required: true
        type: string
        default: next

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout branch for release
        uses: actions/checkout@v4

      - name: Get tag version from package.json
        id: version
        run: |
          INPUT_VERSION=${{ github.event.inputs.version }} 
          if [ -z "$INPUT_VERSION" ]; then
            echo "::info:: No version input provided, defaulting to 'next'."
            INPUT_VERSION="next"
          fi

          if [ $INPUT_VERSION = "next" ]; then
            CURR=$(jq -r .version composer.json)
            MAJOR=$(echo $CURR | cut -d. -f1)
            MINOR=$(echo $CURR | cut -d. -f2)
            PATCH=$(echo $CURR | cut -d. -f3)
            NEW_PATCH=$((PATCH+1))
            NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
            VERSION="$NEW_VERSION"
          else
            VERSION="${{ github.event.inputs.version }}"
          fi
          
          if [ -z "$VERSION" ]; then
            echo "::error::Version is empty. Failing job."
            exit 1
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  changelog:
    runs-on: ubuntu-latest
    needs: version
    strategy:
      matrix:
        include:
          - target-file: "CHANGELOG.md"
            template: "changelog"
            name: "github-changelog"
          - target-file: "src/readme.txt"
            template: "readme"
            name: "wordpress-readme"
    steps:
      - name: Dispatch changelog generation
        id: dispatch
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          
          if ! command -v gh &> /dev/null; then
            sudo apt update && sudo apt install -y gh
          fi
          
          # Check if the repository exists and is accessible
          target_repo="codesnippetspro/.github-private"
          if ! gh repo view "$target_repo" >/dev/null 2>&1; then
            echo "::warning::Repository $target_repo is not accessible or doesn't exist"
            echo "::warning::Skipping changelog generation for ${{ matrix.name }}"
            echo "skip_monitoring=true" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Dynamically find the changelog workflow
          echo "üîç Looking for changelog workflow in $target_repo..."
          
          # Try different possible workflow names/patterns
          workflow_candidates=(
            "changelog.yml"
            "changelog"
            "Changelog"
            "(Changelog): Generate"
            "Generate"
          )
          
          workflow_id=""
          workflow_name=""
          
          # First, try to find by exact name match
          for candidate in "${workflow_candidates[@]}"; do
            if workflow_info=$(gh workflow list --repo "$target_repo" | grep -i "$candidate" | head -1); then
              # Extract workflow ID (last column)
              workflow_id=$(echo "$workflow_info" | awk '{print $NF}')
              workflow_name="$candidate"
              echo "‚úÖ Found workflow '$candidate' with ID: $workflow_id"
              break
            fi
          done
          
          # If not found by name, try to find by keywords in the workflow name
          if [ -z "$workflow_id" ]; then
            echo "üîç Searching for workflow containing 'changelog' or 'generate'..."
            if workflow_info=$(gh workflow list --repo "$target_repo" | grep -i -E "(changelog|generate)" | head -1); then
              workflow_id=$(echo "$workflow_info" | awk '{print $NF}')
              workflow_name=$(echo "$workflow_info" | awk '{for(i=1;i<NF;i++) printf "%s ", $i; print ""}' | sed 's/ *$//')
              echo "‚úÖ Found workflow '$workflow_name' with ID: $workflow_id"
            fi
          fi
          
          # If still not found, list all workflows and exit
          if [ -z "$workflow_id" ]; then
            echo "::warning::No changelog workflow found in $target_repo"
            echo "üîç Available workflows:"
            gh workflow list --repo "$target_repo" || echo "Failed to list workflows"
            echo "::warning::Skipping changelog generation for ${{ matrix.name }}"
            echo "skip_monitoring=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Attempt to dispatch the workflow using the found ID
          echo "üöÄ Dispatching workflow ID: $workflow_id ($workflow_name)"
          if ! gh workflow run "$workflow_id" \
            --repo "$target_repo" --ref main \
            --field repo="${{ github.repository }}" \
            --field branch="${{ github.ref_name }}" \
            --field version="${{ needs.version.outputs.tag }}" \
            --field template="${{ matrix.template }}" \
            --field target-file="./${{ matrix.target-file }}"; then
            echo "::error::Failed to dispatch workflow ID $workflow_id in $target_repo"
            echo "::error::This might be due to insufficient permissions or workflow configuration"
            exit 1
          fi
          
          echo "‚úÖ Successfully dispatched changelog generation for ${{ matrix.name }}"
          echo "skip_monitoring=false" >> $GITHUB_OUTPUT
          echo "workflow_id=$workflow_id" >> $GITHUB_OUTPUT
          echo "workflow_name=$workflow_name" >> $GITHUB_OUTPUT

      - name: Monitor workflow execution
        if: steps.dispatch.outputs.skip_monitoring != 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          workflow_name="${{ steps.dispatch.outputs.workflow_name }}"
          workflow_id="${{ steps.dispatch.outputs.workflow_id }}"
          target_repo="codesnippetspro/.github-private"
          max_attempts=30  # Maximum 5 minutes (30 * 10 seconds)
          attempt=0
          
          echo "Monitoring workflow: $workflow_name (ID: $workflow_id) in repository: $target_repo"
          
          # Check if the repository exists and is accessible
          if ! gh repo view "$target_repo" >/dev/null 2>&1; then
            echo "::warning::Repository $target_repo is not accessible or doesn't exist"
            echo "::warning::Skipping monitoring for workflow: $workflow_name"
            exit 0
          fi
          
          while : ; do
            attempt=$((attempt + 1))
            
            # Check if we've exceeded max attempts
            if [ $attempt -gt $max_attempts ]; then
              echo "::warning::Timeout reached after $max_attempts attempts. Workflow '$workflow_name' monitoring stopped."
              echo "::warning::This might be expected if testing locally or if the workflow doesn't exist yet."
              exit 0
            fi
            
            # Get the latest run for this workflow using the workflow ID
            if ! status=$(gh run list --workflow "$workflow_id" --limit 1 --json status -q '.[0].status' --repo "$target_repo" --ref main 2>/dev/null); then
              echo "::warning::Attempt $attempt/$max_attempts: Could not find workflow '$workflow_name' (ID: $workflow_id) or no runs exist yet. Checking again..."
              sleep 10
              continue
            fi
            
            if ! conclusion=$(gh run list --workflow "$workflow_id" --limit 1 --json conclusion -q '.[0].conclusion' --repo "$target_repo" --ref main 2>/dev/null); then
              echo "::warning::Attempt $attempt/$max_attempts: Could not get conclusion for workflow '$workflow_name' (ID: $workflow_id). Checking again..."
              sleep 10
              continue
            fi
            
            if [ "$status" = "completed" ]; then
              if [ "$conclusion" != "success" ]; then
                echo "::error::Workflow $workflow_name (ID: $workflow_id) failed with conclusion: $conclusion"
                exit 1
              fi
              echo "‚úÖ Workflow $workflow_name (ID: $workflow_id) completed successfully"
              break
            fi
            
            echo "‚è≥ Attempt $attempt/$max_attempts: Workflow $workflow_name (ID: $workflow_id) is still running (status: $status). Waiting..."
            sleep 10
          done
