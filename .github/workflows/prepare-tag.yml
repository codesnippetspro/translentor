name: "(Tag): Prepare"

permissions:
  contents: write
  pull-requests: write
  actions: read

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to create the tag for (e.g. 3.6.9) or `next`'
        required: true
        type: string
        default: next

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout branch for release
        uses: actions/checkout@v4

      - name: Get tag version from package.json
        id: version
        run: |
          INPUT_VERSION=${{ github.event.inputs.version }} 
          if [ -z "$INPUT_VERSION" ]; then
            echo "::info:: No version input provided, defaulting to 'next'."
            INPUT_VERSION="next"
          fi

          if [ $INPUT_VERSION = "next" ]; then
            CURR=$(jq -r .version composer.json)
            MAJOR=$(echo $CURR | cut -d. -f1)
            MINOR=$(echo $CURR | cut -d. -f2)
            PATCH=$(echo $CURR | cut -d. -f3)
            NEW_PATCH=$((PATCH+1))
            NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
            VERSION="$NEW_VERSION"
          else
            VERSION="${{ github.event.inputs.version }}"
          fi
          
          if [ -z "$VERSION" ]; then
            echo "::error::Version is empty. Failing job."
            exit 1
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  changelog:
    runs-on: ubuntu-latest
    needs: version
    strategy:
      matrix:
        include:
          - target-file: "CHANGELOG.md"
            template: "changelog"
            name: "github-changelog"
          - target-file: "src/readme.txt"
            template: "readme"
            name: "wordpress-readme"
    steps:
      - name: Dispatch changelog generation
        id: dispatch
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          
          if ! command -v gh &> /dev/null; then
            sudo apt update && sudo apt install -y gh
          fi
          
          # Check if the repository exists and is accessible
          target_repo="codesnippetspro/.github-private"
          if ! gh repo view "$target_repo" >/dev/null 2>&1; then
            echo "::warning::Repository $target_repo is not accessible or doesn't exist"
            echo "::warning::Skipping changelog generation for ${{ matrix.name }}"
            echo "skip_monitoring=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check if the workflow exists
          if ! gh workflow list --repo "$target_repo" | grep -q "changelog.yml"; then
            echo "::warning::Workflow 'changelog.yml' not found in $target_repo"
            echo "::warning::Skipping changelog generation for ${{ matrix.name }}"
            echo "skip_monitoring=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Attempt to dispatch the workflow with error handling
          if ! gh workflow run changelog.yml \
            --repo "$target_repo" --ref main \
            --field repo="${{ github.repository }}" \
            --field branch="${{ github.ref_name }}" \
            --field version="${{ needs.version.outputs.tag }}" \
            --field template="${{ matrix.template }}" \
            --field target-file="./${{ matrix.target-file }}"; then
            echo "::error::Failed to dispatch workflow changelog.yml in $target_repo"
            echo "::error::This might be due to insufficient permissions or missing workflow"
            exit 1
          fi
          
          echo "✅ Successfully dispatched changelog generation for ${{ matrix.name }}"
          echo "skip_monitoring=false" >> $GITHUB_OUTPUT

      - name: Monitor workflow execution
        if: steps.dispatch.outputs.skip_monitoring != 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          workflow_name="${{ matrix.name }}"
          target_repo="codesnippetspro/.github-private"
          max_attempts=30  # Maximum 5 minutes (30 * 10 seconds)
          attempt=0
          
          echo "Monitoring workflow: $workflow_name in repository: $target_repo"
          
          # Check if the repository exists and is accessible
          if ! gh repo view "$target_repo" >/dev/null 2>&1; then
            echo "::warning::Repository $target_repo is not accessible or doesn't exist"
            echo "::warning::Skipping monitoring for workflow: $workflow_name"
            exit 0
          fi
          
          while : ; do
            attempt=$((attempt + 1))
            
            # Check if we've exceeded max attempts
            if [ $attempt -gt $max_attempts ]; then
              echo "::warning::Timeout reached after $max_attempts attempts. Workflow '$workflow_name' monitoring stopped."
              echo "::warning::This might be expected if testing locally or if the workflow doesn't exist yet."
              exit 0
            fi
            
            # Get the latest run for this workflow with error handling
            if ! status=$(gh run list --workflow changelog.yml --limit 1 --json status -q '.[0].status' --repo "$target_repo" --ref main 2>/dev/null); then
              echo "::warning::Attempt $attempt/$max_attempts: Could not find workflow '$workflow_name' or no runs exist yet. Checking again..."
              sleep 10
              continue
            fi
            
            if ! conclusion=$(gh run list --workflow changelog.yml --limit 1 --json conclusion -q '.[0].conclusion' --repo "$target_repo" --ref main 2>/dev/null); then
              echo "::warning::Attempt $attempt/$max_attempts: Could not get conclusion for workflow '$workflow_name'. Checking again..."
              sleep 10
              continue
            fi
            
            if [ "$status" = "completed" ]; then
              if [ "$conclusion" != "success" ]; then
                echo "::error::Workflow $workflow_name failed with conclusion: $conclusion"
                exit 1
              fi
              echo "✅ Workflow $workflow_name completed successfully"
              break
            fi
            
            echo "⏳ Attempt $attempt/$max_attempts: Workflow $workflow_name is still running (status: $status). Waiting..."
            sleep 10
          done

      - name: Fallback changelog generation
        if: steps.dispatch.outputs.skip_monitoring == 'true'
        run: |
          echo "::notice::Generating fallback changelog for ${{ matrix.name }}"
          
          target_file="${{ matrix.target-file }}"
          version="${{ needs.version.outputs.tag }}"
          
          # Create basic changelog entry
          if [ "${{ matrix.template }}" = "changelog" ]; then
            # For CHANGELOG.md
            if [ -f "$target_file" ]; then
              # Create backup
              cp "$target_file" "${target_file}.backup"
              
              # Add new version entry at the top (after header)
              {
                head -n 2 "$target_file"
                echo ""
                echo "## [$version] - $(date +%Y-%m-%d)"
                echo ""
                echo "### Changed"
                echo "- Version bump to $version"
                echo ""
                tail -n +3 "$target_file"
              } > "${target_file}.tmp" && mv "${target_file}.tmp" "$target_file"
              
              echo "✅ Updated $target_file with version $version"
            else
              echo "::warning::File $target_file not found, skipping changelog update"
            fi
          elif [ "${{ matrix.template }}" = "readme" ]; then
            # For WordPress readme.txt
            if [ -f "$target_file" ]; then
              # Update version in readme.txt if it exists
              if grep -q "Stable tag:" "$target_file"; then
                sed -i.backup "s/Stable tag:.*/Stable tag: $version/" "$target_file"
                echo "✅ Updated stable tag in $target_file to $version"
              else
                echo "::warning::Stable tag not found in $target_file"
              fi
            else
              echo "::warning::File $target_file not found, skipping readme update"
            fi
          fi

  create-tag:
    runs-on: ubuntu-latest
    needs: [version, changelog]
    if: always() && needs.version.result == 'success'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          tools: composer

      - name: Update version in composer.json
        run: |
          version="${{ needs.version.outputs.tag }}"
          php -r "
            \$composer = json_decode(file_get_contents('composer.json'), true);
            \$composer['version'] = '$version';
            file_put_contents('composer.json', json_encode(\$composer, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES) . PHP_EOL);
          "
          echo "✅ Updated composer.json version to $version"

      - name: Update version in plugin file
        run: |
          version="${{ needs.version.outputs.tag }}"
          plugin_file="src/translentor.php"
          
          if [ -f "$plugin_file" ]; then
            # Update plugin version
            sed -i.backup "s/Version: .*/Version: $version/" "$plugin_file"
            
            # Update plugin constant if it exists
            if grep -q "TRANSLENTOR_VERSION" "$plugin_file"; then
              sed -i.backup "s/define('TRANSLENTOR_VERSION', '[^']*')/define('TRANSLENTOR_VERSION', '$version')/" "$plugin_file"
            fi
            
            echo "✅ Updated plugin version to $version"
          else
            echo "::warning::Plugin file not found at $plugin_file"
          fi

      - name: Commit version changes
        run: |
          version="${{ needs.version.outputs.tag }}"
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add all changed files
          git add -A
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Version bump to $version"
            git push origin ${{ github.ref_name }}
            echo "✅ Committed version changes"
          fi

      - name: Create and push tag
        run: |
          version="${{ needs.version.outputs.tag }}"
          
          # Create annotated tag
          git tag -a "v$version" -m "Release version $version"
          
          # Push tag
          git push origin "v$version"
          
          echo "✅ Created and pushed tag v$version"

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          version="${{ needs.version.outputs.tag }}"
          
          # Create release notes
          cat > release_notes.md << EOF
          ## Changes in v$version
          
          This release includes:
          - Version bump to $version
          - Updated plugin files and documentation
          
          For detailed changes, see the CHANGELOG.md file.
          EOF

          # Create GitHub release
          gh release create "v$version" \
            --title "Release v$version" \
            --notes-file release_notes.md \
            --draft=false \
            --prerelease=false
          
          echo "✅ Created GitHub release for v$version"
