name: "(Tag): Prepare"

permissions:
  contents: write
  pull-requests: write
  actions: read

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to create the tag for (e.g. 3.6.9) or `next`'
        required: true
        type: string
        default: next

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout branch for release
        uses: actions/checkout@v4

      - name: Get tag version from package.json
        id: version
        run: |
          INPUT_VERSION=${{ github.event.inputs.version }} 
          if [ -z "$INPUT_VERSION" ]; then
            echo "::info:: No version input provided, defaulting to 'next'."
            INPUT_VERSION="next"
          fi

          if [ $INPUT_VERSION = "next" ]; then
            CURR=$(jq -r .version composer.json)
            MAJOR=$(echo $CURR | cut -d. -f1)
            MINOR=$(echo $CURR | cut -d. -f2)
            PATCH=$(echo $CURR | cut -d. -f3)
            NEW_PATCH=$((PATCH+1))
            NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
            VERSION="$NEW_VERSION"
          else
            VERSION="${{ github.event.inputs.version }}"
          fi
          
          if [ -z "$VERSION" ]; then
            echo "::error::Version is empty. Failing job."
            exit 1
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  prepare-workflows:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      workflows: ${{ steps.set-matrix.outputs.workflows }}
    steps:
      - name: Set matrix and workflow names
        id: set-matrix
        run: |
          # Define the matrix configuration as a single line JSON
          matrix='{"include":[{"target-file":"CHANGELOG.md","template":"changelog","name":"github-changelog"},{"target-file":"src/readme.txt","template":"readme","name":"wordpress-readme"}]}'
          
          # Extract workflow names dynamically
          workflows=$(echo "$matrix" | jq -r '.include[].name' | tr '\n' ',' | sed 's/,$//')
          
          echo "matrix=$matrix" >> $GITHUB_OUTPUT
          echo "workflows=$workflows" >> $GITHUB_OUTPUT
          echo "Generated workflows: $workflows"

  changelog:
    runs-on: ubuntu-latest
    needs: [version, prepare-workflows]
    strategy:
      matrix: ${{ fromJson(needs.prepare-workflows.outputs.matrix) }}
    steps:
      - name: Dispatch changelog generation
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          
          if ! command -v gh &> /dev/null; then
            sudo apt update && sudo apt install -y gh
          fi
          
          gh workflow run changelog.yml \
            --repo codesnippetspro/.github-private \
            --field repo="${{ github.repository }}" \
            --field branch="${{ github.ref_name }}" \
            --field version="${{ needs.version.outputs.tag }}" \
            --field template="${{ matrix.template }}" \
            --field target-file="./${{ matrix.target-file }}"

  monitor:
    runs-on: ubuntu-latest
    needs: [changelog, prepare-workflows]
    steps:
      - name: Monitor dispatched workflows
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Install gh CLI first
          if ! command -v gh &> /dev/null; then
            sudo apt update && sudo apt install -y gh
          fi
          
          # Get comma-separated workflow names from prepare-workflows job output
          workflows="${{ needs.prepare-workflows.outputs.workflows }}"
          
          # Parse comma-separated list into array
          IFS=',' read -r -a workflow_array <<< "$workflows"
          
          echo "Monitoring workflows: ${workflow_array[@]}"
          
          # Monitor each workflow
          for workflow in "${workflow_array[@]}"; do
            echo "Checking status of workflow: $workflow"
            
            while : ; do
              # Get the latest run for this workflow
              status=$(gh run list --workflow "$workflow" --limit 1 --json status -q '.[0].status' --repo codesnippetspro/.github-private)
              conclusion=$(gh run list --workflow "$workflow" --limit 1 --json conclusion -q '.[0].conclusion' --repo codesnippetspro/.github-private)
              
              if [ "$status" = "completed" ]; then
                if [ "$conclusion" != "success" ]; then
                  echo "::error::Workflow $workflow failed with conclusion: $conclusion"
                  exit 1
                fi
                echo "✅ Workflow $workflow completed successfully"
                break
              fi
              
              echo "⏳ Workflow $workflow is still running (status: $status). Waiting..."
              sleep 10
            done
          done
          
          echo "🎉 All workflows completed successfully!"
